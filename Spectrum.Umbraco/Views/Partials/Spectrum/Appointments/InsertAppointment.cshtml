@using Spectrum.Content.Appointments
@using Spectrum.Content.Appointments.Controllers
@model Spectrum.Content.Appointments.ViewModels.InsertAppointmentViewModel
@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);

    if (Model.Duration == 0)
    {
        int duration = 60;

        if (Request.Cookies[AppointmentConstants.LastAppointmentDuration] != null)
        {
            duration = Convert.ToInt32(Request.Cookies[AppointmentConstants.LastAppointmentDuration].Value);
        }

        Model.Duration = duration;
    }
}

@using (Html.BeginUmbracoForm<AppointmentsController>("InsertAppointment"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="panel panel-default bootstrap-basic">
        <div class="panel-heading">
            <h4 class="panel-title">Make an Appointment</h4>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="form-group col-xs-8">
                    <div>
                        <label class="control-label">Start Time</label>
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.StartTime, "{0:dd-MMM-yyyy HH:mm}", new {@class = "date"})
                        <span class="btn" style="cursor: pointer;">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.ValidationMessageFor(model => model.StartTime)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-xs-8">
                    <div>
                        <label class="control-label">Duration (In minutes)</label>
                    </div>
                    <div>
                        @Html.EditorFor(model => model.Duration)
                        @Html.ValidationMessageFor(model => model.Duration)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-xs-8">
                    <div>
                        <label class="control-label">Location</label>
                    </div>
                    <div>
                        @Html.EditorFor(model => model.Location)
                        @Html.ValidationMessageFor(model => model.Location)                        
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-xs-8">
                    <div>
                        <label class="control-label">Description</label>
                    </div>
                    <div>
                        @Html.TextAreaFor(model => model.Description, 5, 80, null)
                        @Html.ValidationMessageFor(model => model.Description)                    
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="form-group col-xs-8">
                    <div>
                        <label class="control-label">Attendees</label>
                    </div>
                    <div>
                        <input class="text-box single-line" id="attendeeInput" placeholder="Enter email address" data-val="true" data-val-required="Please enter a valid Email Address">
                        <span class="btn" style="cursor: pointer;">
                            <span class="glyphicon glyphicon-plus" id="addAttendee"></span>
                        </span>
                    </div>
                    <div>
                        <span class="field-validation-valid" data-valmsg-for="attendeeInput" data-valmsg-replace="true"></span>
                    </div>
                    <div>
                        <ul id="attendeeList" class="list-group" style="list-style-type: none;">
                            @Html.DisplayFor(model => model.Attendees)

                            @if (Model.Attendees != null) {
                                foreach (string attendee in Model.Attendees) {
                                    <li style="padding-top:10px">
                                        <input id="Attendees_' + index + '" name="Attendees[' + index + ']" value='" + attendee "'/>
                                        &nbsp;&nbsp;&nbsp;
                                        <a href="#" onclick="$(this).parent().remove();updateAttendees();"><span class="glyphicon glyphicon-remove"></span></a>' +
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            </div>

            <button value="submit" id="submit" class="btn btn-primary">Save Appointment</button>

        </div>
    </div>

    <script>
        
        function updateAttendees() {

            var items = document.getElementById("attendeeList").getElementsByTagName("li");

            for (var i = 0; i < items.length; i++) {
                var input = items[i].getElementsByTagName("input")[0];

                input.id = "Attendees_" + i;
                input.name = "Attendees[" + i + "]";
            }
        }

        $(document).ready(function () {

            $('.input-validation-error').parents('.form-group').addClass('has-error');
            $('.field-validation-error').addClass('text-danger');

            $('.date').datetimepicker(
                {
                    dateFormat: 'dd-M-yy',
                    controlType: 'select',
                    hourMin: 8,
                    hourMax: 20,
                    stepMinute: 5, 
                    oneLine: true
                });

            $('.btn').click(function() {
                $(".date", $(this).closest(".form-group")).focus();
            });

            $('#addAttendee').click(function () {

                event.preventDefault(); 
                var inputValue = $('#attendeeInput').val();
                var filter = /^([a-zA-Z0-9_\.\-])+\@@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

                if (!filter.test(inputValue)) {
                    $('#attendeeInput').parents(".form-group").addClass('has-error');
                    $('#attendeeInput').addClass('text-danger');
                    $('span[data-valmsg-for="attendeeInput"]').text('Please enter a valid Email Address');
                    $('span[data-valmsg-for="attendeeInput"]').addClass('text-danger');
                } else {

                    var items = document.getElementById("attendeeList").getElementsByTagName("li");
                    var index = items.length;

                    $('#attendeeList').prepend('<li style="padding-top:10px">' +
                        '<input id="Attendees_' + index + '" name="Attendees[' + index + ']" value=' + inputValue + '>' +
                        '</input>&nbsp;&nbsp;&nbsp;' +
                        '<a href="#" onclick="$(this).parent().remove();updateAttendees();"><span class="glyphicon glyphicon-remove"></span></a>' +
                        '</li>');

                    $('#attendeeInput').val('');
                    $('span[data-valmsg-for="attendeeInput"]').text('');
                }
            });

            $('form').submit(function(event) {
                $('#submit').prop('disabled', true);
            });
        });

    </script>
}